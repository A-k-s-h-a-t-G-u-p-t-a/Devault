generator client {
  provider = "prisma-client-js"
}
//npx prisma db push
//npx prisma generate 
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  username     String?
  email        String    @unique
  photo       String?     
  passwordHash String
  githubId     String?
  role         Boolean?
  projects     Project[] @relation("UserProjects")
  discussions  Discussion[] @relation("UserDiscussions")
  replies      Reply[]       @relation("UserReplies")
}

model Project {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId        String   @db.ObjectId
  title          String
  description    String?
  githubRepoId   String?
  githubRepoUrl  String?
  fundingGoal    Float?
  currentFunding Float?   @default(0)
  status         String   @default("active")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  owner          User     @relation(fields: [ownerId], references: [id], name: "UserProjects")
  issues         Issue[]  @relation("ProjectIssues")
  discussions    Discussion[] @relation("ProjectDiscussions")
}

model Issue {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId     String   @db.ObjectId
  githubIssueId String?
  title         String
  description   String?
  bountyAmount  Float?
  status        String   @default("open")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  project       Project  @relation(fields: [projectId], references: [id], name: "ProjectIssues")
}

model Discussion {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String   @db.ObjectId
  userId      String   @db.ObjectId
  title       String
  content     String
  category    String   // "codebase", "issues", "governance", "general"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id], name: "ProjectDiscussions")
  user        User     @relation(fields: [userId], references: [id], name: "UserDiscussions")
  replies     Reply[]  @relation("DiscussionReplies")
}

model Reply {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  discussionId  String   @db.ObjectId
  userId        String   @db.ObjectId
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  discussion    Discussion  @relation(fields: [discussionId], references: [id], name: "DiscussionReplies")
  user         User        @relation(fields: [userId], references: [id], name: "UserReplies")
}
