generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkId        String    @unique
  username       String    @unique // Required for GitHub API fetch
  email          String?   @unique
  githubId       String?   @unique
  githubAvatarUrl String?  // Store GitHub avatar
  photo          String?
  passwordHash   String
  role           String?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt

  projects       Project[] @relation("UserProjects")
}

model Project {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId        String   @db.ObjectId
  title          String
  description    String?
  githubRepoId   String?  @unique // Ensure unique repo storage
  githubRepoUrl  String?
  stars          Int?     @default(0) // Store GitHub repo stars
  forks          Int?     @default(0) // Store GitHub repo forks
  watchers       Int?     @default(0) // Store GitHub repo watchers
  fundingGoal    Float?
  currentFunding Float?   @default(0)
  status         String   @default("active")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  owner          User     @relation(fields: [ownerId], references: [id], name: "UserProjects")
  issues         Issue[]  @relation("ProjectIssues") 
}

model Issue {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId     String   @db.ObjectId
  githubIssueId String?
  title         String
  description   String?
  bountyAmount  Float?
  status        String   @default("open")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  project       Project  @relation(fields: [projectId], references: [id], name: "ProjectIssues")
}